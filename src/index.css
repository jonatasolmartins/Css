/* Defines global variables that can be used throughout the document. 
The variables are defined using the var() function and are accessed using the var() function. */


/* 
    The value of this property is calculated using the clamp() function, which creates a range of values that are bounded by a minimum and maximum value.
    The clamp() function takes three arguments: a minimum value, a preferred value, and a maximum value.
    In this case, the minimum value is 3.5rem, the preferred value is 12vw + 1rem, and the maximum value is 12rem.
    The vw unit is a relative unit that represents a percentage of the viewport width, so 12vw is equal to 12% of the viewport width.

    The purpose of this code is to set the font size of an element to a responsive value that scales with the viewport width. 
    The clamp() function ensures that the font size will never be smaller than 3.5rem or larger than 12rem, and will be based on the viewport width when it is between these two values.
*/

:root {
    --fs-xl: clamp(min(3rem), calc(4vw + 1rem), max(5rem));
    --fs-sm: clamp(min(1rem), calc(1vw + 0.2rem), max(4rem));
    --white: #ffffff;
    --margent: 	#A300A3;
    --hotmag: #ff0000;
    --aqua: #00ffff;
    --darkblue :  #161629;
    --lighgray: #A9A9A9;
    --darkbluegren: #022a32;
    --darkestblue :  #080812;
    --mono: 'Roboto Mono', monospace;
    --sans: 'Liberation Sans', sans-serif;
}

/* Set the default font size to be 16px. 
This is the font size that browsers usually use when you don't specify a font size.
 This is also the font size that browsers use when you use the rem unit.
 The rem unit is relative to the root element, which is the html element.
 So, if you set the font size of the html element to 16px, then 1rem is equal to 16px. 
 If you set the font size of the html element to 20px, then 1rem is equal to 20px. */

 html {
    font-size: 16px;
    background-color: var(--darkblue);
    /* Sets the defaulr color of all element's text */
    color: var(--white);
    /* Takes the border and padding into account when you set the width and height of an element. */
    box-sizing: border-box;
}

/* This sets the default margin, padding, and box-sizing properties for all elements on the webpage.
 The asterisk symbol (*) is a universal selector, which means that it selects all elements on the page. */
*, *::before, *::after {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}


header,
main {
    margin-left: 2em;
    margin-right: 2em;
}

nav {
    display: none;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
    font-size: var(--fs-sm);
    padding: 0;
    margin: 0;
    gap: 1rem;
}


header a {
    color: var(--white);
    text-decoration: none;
}

header [class*="fa-"] {
    font-size: 150%;
    color: var(--aqua);
}

header li:first-child::after {
    content: "Free the code";
    font-size: 2rem;
    color: var(--white);
    padding-left: 0.5rem;
}

#menu_logo::after {
    content: "Free the code";
    font-size: 1.5rem;
    font-family: var(--sans);
    color: var(--white);
    padding-left: 0.5rem;
}


header a:hover,
header [class*="fa-"]:hover {
    color: var(--hotmag);
}

header {
    display: block;
    position: relative;
}

.header-container {
    padding-top: 1rem;
    padding-bottom: 1rem;
    margin-bottom: 1rem;
    background-color: var(--lighgray);
}

#menu__toggle,
.menu__btn {
    position: absolute;
    right: 0rem;
    top: 0.5rem;
}

/* Set the checkbox to be hidden. */
#menu__toggle {
    opacity: 0;
}

/* This is a CSS rule that targets an element with the class main-menu when a checkbox with the ID menu__toggle is checked.
 The rule sets the display property of the main-menu element to flex, which causes it to be displayed as a flex container.

The ~ selector is used to select siblings that come after the first element. 
In this case, the ~ selector is used to select the main-menu element that comes after the menu__toggle checkbox in the HTML markup. */
#menu__toggle:checked ~ .main-menu {
    display: flex;
}

nav li:first-child {
    /* The first li element is given a flex-basis of 100% so that it takes up the entire width of the page. */
    flex-basis: 100%;
    text-align: center;
    display: none;
}

ul {
    /* The display property sets how an element should be displayed on the webpage. 
    In this case, the display property is set to contents.
    This value causes the <ul> element to behave as if it is not there,
     and its child elements will be displayed as if they are direct children of the parent element (nav). */
    display: contents;
    padding: 1rem;
    /* Removes the dot that is displayed before each list item. */
    list-style-type: none;
}


button {
    background-color: var(--margent);
    color: var(--white);
    border-radius: 5px;
    /* Removes the default border that is displayed around the button. */
    border: none;
    padding: 0.5rem;
}

button:hover {
    color: var(--white);
    background-color: var(--hotmag);
}

#intro {
    padding-bottom: 10rem;
    display: block;
}

#intro p {
    /* The font-size property is set to 1rem which means that the font size of the text will be 16px.
     This is because the font size of the html element is set to 16px. */
    font-size: var(--fs-sm);
    /* The line-height property is set to 1.5 which means that the line height of the text will be 1.5 times the font size of the text.
     Since the font size of the text is 16px, the line height of the text will be 24px. */
     /* I omitted the unit of measurement so the size is relative to the font size of the text and not a fixed value. */
    line-height: 1.5;
}
/* 
The #intro .name selector targets the element with the class of name that is a child of an element with the ID of intro.
This can be used to style a specific section of the webpage, such as an introduction section. */
#intro .name {
    font-family: var(--mono);
}

/* The .name span selector targets all <span> elements that are descendants of an element with the class of name. 
The <span> element is a generic inline container that can be used to group text or other inline elements. */
p.name span {
    font-family: var(--sans);
    /* Font-size will be 64px since html font-size is set to 16px */
    font-size: var(--fs-xl);
    color: var(--aqua);
    /* An span element is an inline element by default, which means that it will be displayed on the same line as the text that comes before and after it.
    So to make the span element display on its own line, the display property is set to block. */
    display: block;
}

#intro h2 {
    font-size: var(--fs-xl);
}

a {
    color: var(--margent);
}

/* The :hover pseudo-class is used to target an element when the user hovers over it with their mouse.
 In this case, it targets anchor elements. */
a:hover {
    /* When an anchor element is hovered over, the color property is set to the value of the --hotmag variable using the var() function.
     This means that the color of the text will change to the value of the --hotmag variable when the user hovers over the link. */
    color: var(--hotmag);
    /* The text-decoration property is also set to none, which means that the underline that is typically displayed under links will be removed when the user hovers over the link. */
    text-decoration: none;
}

.horizontal-line {
    padding-bottom: 3px;
    background: linear-gradient(to right,var(--margent), var(--aqua));
}

#footer {
    background-color: var(--darkbluegren);
    height: clamp(10vh, 25vw + 2rem, 40vh);
}
footer {
    padding-top: 2rem;
    line-height: 1;
    text-align: center;
    background-color: var(--darkbluegren);
    font-size: var(--fs-sm);
    color: var(--white);
}
  
/* When the page size is 850px or larger, the @media rule will be applied. */
@media (min-width: 850px) {

   nav,
   section {
       /* Fix the max size of the nav bar and section to 1250px and center it.  */
       max-width: 1250px;
       margin: 0 auto;
   }

   nav li:first-child {
        flex-basis: auto;
        /* Set the text-align property to left so that the text(li Projects) is aligned to the left side of the page. */
        text-align: left;
        /* The flex box for the nav centered the li elements, so the remaining amount of space on the page is distributed to the left and right side of the li elements.
        By setting the margin: right: auto, the remaining amount of space is put to the right side of the first li elements(Projects) and the others li elements are pushed to the right side of the page.
        (Projects .....SPace..... About Contact) */
        margin-right: auto;
   }

}

@media (min-width: 550px) {

    #menu_btn,
    #menu__toggle,
    #menu_logo
    {
        display: none;
    }

    nav {
        display: flex;
    }

    nav li:first-child {
        display: block;
    }

    .header-container {
        background-color: unset;
    }

}
